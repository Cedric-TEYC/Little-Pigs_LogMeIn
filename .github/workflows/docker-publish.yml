name: DevSecOps Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  security-events: write

jobs:
  security_quality:
    name: Security & Quality (Trivy CLI, Bandit, Flake8)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Trivy
        run: |
          sudo apt-get update && sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.50.2/trivy_0.50.2_Linux-64bit.deb
          sudo dpkg -i trivy_0.50.2_Linux-64bit.deb
      - name: Trivy scan codebase (SCA + vuln + secrets)
        run: |
          trivy fs --exit-code 0 --severity CRITICAL,HIGH,MEDIUM --format table --scanners vuln,secret,config .
        continue-on-error: true
      - name: Bandit security scan (Python)
        uses: tj-actions/bandit@v5
        continue-on-error: true
        with:
          targets: "./backend"
      - name: Flake8 linter
        uses: py-actions/flake8@v2
        continue-on-error: true
        with:
          path: "./backend"

  pytest:
    name: Pytest (unit tests)
    runs-on: ubuntu-latest
    needs: security_quality
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          pip install -r backend/requirements.txt
          pip install pytest
      - name: Run pytest
        run: pytest backend/tests || true

  build_docker:
    name: Build, Scan & Push Docker Images
    runs-on: ubuntu-latest
    needs: [pytest]
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}
      - name: Build backend Docker image
        run: docker build -t $DOCKERHUB_USERNAME/littlepigs-backend:latest ./backend
      - name: Build frontend Docker image
        run: docker build -t $DOCKERHUB_USERNAME/littlepigs-frontend:latest ./frontend
      - name: Build nginx Docker image
        run: docker build -t $DOCKERHUB_USERNAME/littlepigs-nginx:latest -f nginx/Dockerfile .
      - name: Install Trivy
        run: |
          sudo apt-get update && sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.50.2/trivy_0.50.2_Linux-64bit.deb
          sudo dpkg -i trivy_0.50.2_Linux-64bit.deb
      - name: Trivy scan backend Docker image
        run: |
          trivy image --exit-code 0 --severity CRITICAL,HIGH,MEDIUM --format sarif -o trivy-backend.sarif $DOCKERHUB_USERNAME/littlepigs-backend:latest
        continue-on-error: true
      - name: Trivy scan frontend Docker image
        run: |
          trivy image --exit-code 0 --severity CRITICAL,HIGH,MEDIUM --format sarif -o trivy-frontend.sarif $DOCKERHUB_USERNAME/littlepigs-frontend:latest
        continue-on-error: true
      - name: Trivy scan nginx Docker image
        run: |
          trivy image --exit-code 0 --severity CRITICAL,HIGH,MEDIUM --format sarif -o trivy-nginx.sarif $DOCKERHUB_USERNAME/littlepigs-nginx:latest
        continue-on-error: true
      - name: Push backend image
        run: docker push $DOCKERHUB_USERNAME/littlepigs-backend:latest
      - name: Push frontend image
        run: docker push $DOCKERHUB_USERNAME/littlepigs-frontend:latest
      - name: Push nginx image
        run: docker push $DOCKERHUB_USERNAME/littlepigs-nginx:latest
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-backend.sarif"
          category: "trivy-backend"
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-frontend.sarif"
          category: "trivy-frontend"
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-nginx.sarif"
          category: "trivy-nginx"
      - name: Generate CI Summary
        if: always()
        run: |
          echo '## CI/CD Job Summary' >> $GITHUB_STEP_SUMMARY
          echo '### Backend Image: `${{ env.DOCKERHUB_USERNAME }}/littlepigs-backend:latest`' >> $GITHUB_STEP_SUMMARY
          echo '### Frontend Image: `${{ env.DOCKERHUB_USERNAME }}/littlepigs-frontend:latest`' >> $GITHUB_STEP_SUMMARY
          echo '### Nginx Image: `${{ env.DOCKERHUB_USERNAME }}/littlepigs-nginx:latest`' >> $GITHUB_STEP_SUMMARY
          echo '### Security Scans: Trivy, Bandit, Flake8' >> $GITHUB_STEP_SUMMARY
          echo 'Badges visible in README. Full reports available in GitHub Security tab.'

  deploy_cluster:
    name: Deploy Cluster (Docker Swarm)
    runs-on: self-hosted
    needs: [build_docker]
    env:
      ADMIN_USER: ${{ secrets.ADMIN_USER }}
      ADMIN_IP: ${{ secrets.ADMIN_IP }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
    steps:
      - uses: actions/checkout@v3
      - uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}

      - name: Copy deploy scripts and config to admin
        run: |
          scp -o StrictHostKeyChecking=no cluster_config.yml $ADMIN_USER@$ADMIN_IP:~/
          scp -o StrictHostKeyChecking=no docker-compose.yml $ADMIN_USER@$ADMIN_IP:~/
          scp -o StrictHostKeyChecking=no scripts/deploy_cluster.sh $ADMIN_USER@$ADMIN_IP:~/

      - name: Ensure yq is installed on admin
        run: |
          ssh -o StrictHostKeyChecking=no $ADMIN_USER@$ADMIN_IP "\
            if ! command -v yq &> /dev/null; then \
              wget -q https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O yq && \
              chmod +x yq && \
              sudo mv yq /usr/local/bin/yq; \
            fi \
          "

      - name: Deploy Cluster script (run from admin)
        run: |
          ssh -o StrictHostKeyChecking=no $ADMIN_USER@$ADMIN_IP "chmod +x ~/deploy_cluster.sh && ~/deploy_cluster.sh"
