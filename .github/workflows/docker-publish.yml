name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  security-events: write

jobs:
  quality-security:
    name: ðŸ”Ž Security & Quality (Trivy, Bandit, Flake8)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Bandit - Python security scan (backend)
        uses: tj-actions/bandit@v5
        with:
          targets: backend/app.py

      - name: Flake8 - Python linter (backend)
        uses: py-actions/flake8@v2
        with:
          args: backend/app.py

      - name: Trivy (filesystem) - Scan codebase
        uses: aquasecurity/trivy-action@v0.16.2
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "table"
          severity: "CRITICAL,HIGH"

  pytest:
    name: ðŸ§ª Pytest (unit tests)
    runs-on: ubuntu-latest
    needs: quality-security
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt
      - name: Run Pytest (optionnel, Ã  ajouter si tu as des tests)
        run: |
          echo "Pas de tests unitaires pour lâ€™instant"
        # Exâ€¯: pytest --maxfail=1 --disable-warnings -q

  docker:
    name: ðŸš€ Build, Scan & Push Docker images
    runs-on: ubuntu-latest
    needs: [quality-security, pytest]
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and scan backend
      - name: Build backend image
        run: |
          docker build -t $DOCKERHUB_USERNAME/littlepigs-backend:latest ./backend

      - name: Trivy (image) - backend
        uses: aquasecurity/trivy-action@v0.16.2
        with:
          image-ref: "${{ env.DOCKERHUB_USERNAME }}/littlepigs-backend:latest"
          format: "sarif"
          output: "trivy-backend.sarif"
          severity: "CRITICAL,HIGH"

      # Build and scan frontend
      - name: Build frontend image
        run: |
          docker build -t $DOCKERHUB_USERNAME/littlepigs-frontend:latest ./frontend

      - name: Trivy (image) - frontend
        uses: aquasecurity/trivy-action@v0.16.2
        with:
          image-ref: "${{ env.DOCKERHUB_USERNAME }}/littlepigs-frontend:latest"
          format: "sarif"
          output: "trivy-frontend.sarif"
          severity: "CRITICAL,HIGH"

      # Push images
      - name: Push backend image
        run: docker push $DOCKERHUB_USERNAME/littlepigs-backend:latest

      - name: Push frontend image
        run: docker push $DOCKERHUB_USERNAME/littlepigs-frontend:latest

      # Upload Trivy scan results to GitHub Security tab
      - name: Upload Trivy scan results (backend)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-backend.sarif"
      - name: Upload Trivy scan results (frontend)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-frontend.sarif"

      # GÃ©nÃ¨re un rÃ©sumÃ© dans lâ€™onglet "Summary"
      - name: GÃ©nÃ©rer le rÃ©sumÃ© pipeline
        run: |
          echo "### RÃ©sumÃ© du run" >> $GITHUB_STEP_SUMMARY
          echo "Images buildÃ©es et poussÃ©es :" >> $GITHUB_STEP_SUMMARY
          echo "- $DOCKERHUB_USERNAME/littlepigs-backend:latest" >> $GITHUB_STEP_SUMMARY
          echo "- $DOCKERHUB_USERNAME/littlepigs-frontend:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Pour plus d'infos sÃ©curitÃ©, voir lâ€™onglet Security du repo GitHub." >> $GITHUB_STEP_SUMMARY
